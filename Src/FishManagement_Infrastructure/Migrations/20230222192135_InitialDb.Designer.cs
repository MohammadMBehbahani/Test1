// <auto-generated />
using System;
using FishManagement_Infrastructure.Services.SqlDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishManagement_Infrastructure.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20230222192135_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishManagement_Domain.Entities.Fish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("FishFoodWeight")
                        .HasColumnType("float");

                    b.Property<string>("FishType")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Fishes");
                });

            modelBuilder.Entity("FishManagement_Domain.Entities.FishToTank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FishName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FishId");

                    b.HasIndex("TankId");

                    b.ToTable("FishToTanks");
                });

            modelBuilder.Entity("FishManagement_Domain.Entities.Tank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("FishTotalFoodWeight")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TankName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("Id");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("FishManagement_Domain.Entities.FishToTank", b =>
                {
                    b.HasOne("FishManagement_Domain.Entities.Fish", "Fish")
                        .WithMany("FishToTanks")
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishManagement_Domain.Entities.Tank", "Tank")
                        .WithMany("FishToTanks")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FishManagement_Domain.Entities.Fish", b =>
                {
                    b.Navigation("FishToTanks");
                });

            modelBuilder.Entity("FishManagement_Domain.Entities.Tank", b =>
                {
                    b.Navigation("FishToTanks");
                });
#pragma warning restore 612, 618
        }
    }
}
